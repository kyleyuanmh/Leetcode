//数组的topK问题：
/*
一直都是使用排序K次，然后取第k个元素，或者倒数第k个元素当做返回值，排序方法既可以使用冒泡排序或者使用堆排序：
冒泡排序时间复杂度应该是O(n*k)问题；
堆排序应该是O(klgn).
网传一直有一个继续快排的变形，基于分治法还有减治法等来解决问题，现在一直没有实现过，没想到实现起来真的不那么容易，小编改造快排改了半天还是一直出现问题，
现在还是在网上找了有效的代码，就是所谓的“减治法”。

*/


void swap(int& a,int& b)
    {
        int tmp = a;
        a = b;
        b = tmp;
    }
    int partition(vector<int>& nums, int left, int right) {
        int pivot = nums[left], l = left + 1, r = right;
        while (l <= r) {
            if (nums[l] < pivot && nums[r] > pivot) {
                swap(nums[l++], nums[r--]);
            }
            if (nums[l] >= pivot) ++l;
            if (nums[r] <= pivot) --r;
        }
        swap(nums[left], nums[r]);
        return r;
    }
    
    int findKthLargest(vector<int>& nums, int k) {
        int left = 0, right = nums.size() - 1;
        while (true) {
            int pos = partition(nums, left, right);
            if (pos == k - 1) return nums[pos];
            else if (pos > k - 1) right = pos - 1;
            else left = pos + 1;
        }
    }
