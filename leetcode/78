void dfs(vector<vector<int>>&ans,vector<int>&temp,int k,vector<int>& nums)
    {
        for(int i = k;i < nums.size(); i++)
        {
            temp.push_back(nums[i]);
            ans.push_back(temp);
            dfs(ans,temp,i+1,nums);
            temp.pop_back();
        }
    }
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>>ans;
        vector<int>temp;
        if(nums.size()<=0)
        {
            ans.push_back(temp);
            return ans;
        }
        dfs(ans,temp,0,nums);
        temp.clear();
        ans.push_back(temp);
        return ans;
    }
